{"version":3,"sources":["history.ts","apollo.ts","services/encryption/encryption.service.ts","services/events/events.service.ts","scenes/CreateEvent/CreateEvent.state.ts","services/invites/invites.service.ts","services/replies/replies.service.ts","scenes/ManageEvent/ManageEvent.state.ts","scenes/ViewInvite/ViewInvite.state.ts","store.ts","scenes/Bar/Bar.scene.tsx","scenes/CreateEvent/CreateEvent.scene.tsx","scenes/ManageEvent/ManageEvent.scene.tsx","scenes/ViewInvite/ViewInvite.scene.tsx","scenes/Routes/Routes.scene.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["history","createHashHistory","client","ApolloClient","uri","Curve","cryptoFactory","Nacl","urlSafeToNacl","key","util","encodeBase64","decodeURLSafe","getCryptor","theirPublic","myPrivate","derived","deriveKeys","Error","createEncryptor","decryptFromTwoKeys","encrypted","decrypt","crypto","GET_EVENT","gql","_templateObject","parse","json","JSON","e","concat","message","getBySecretKey","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","secretKey","keys","wrap","_context","prev","next","box","keyPair","fromSecretKey","abrupt","apollo","query","variables","_id","encodeURLSafe","publicKey","fetchPolicy","catch","error","alert","then","response","event","data","content","objectSpread","invitees","length","map","doc","invitee","reply","replyJson","stop","_x","apply","this","arguments","CREATE_EVENT_MUTATION","_templateObject2","create","_ref2","_callee2","_context2","stringify","encrypt","mutate","mutation","_x2","empty","description","reducer","state","undefined","action","type","payload","Reply","GET_INVITE","invites_service_templateObject","invite","baseInvite","inviteWithId","CREATE_INVITE_MUTATION","invites_service_templateObject2","name","ownerKey","eventWithoutInvitees","inviteJson","inviteeJson","ownerKeys","objectWithoutProperties","eventId","_x3","_x4","LOAD_EVENT","_loadEvent","isOwner","isLoading","isError","secreteKey","toConsumableArray","replyToString","YES","NO","MAYBE","SEND_REPLY_MUTATION","replies_service_templateObject","sendReply","inviteId","unecnrypted","unencrypted","_loadInvite","SEND_REPLY","dispatch","getState","sendReplyToServer","ViewInvite","_sendReply","combineReducers","CreateEvent","ManageEvent","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","withStyles","theme","createStyles","inner","mixins","gutters","props","classes","react_default","createElement","AppBar","position","color","Box","className","Typography","variant","component","fontSize","connect","setContent","createEvent","push","paper","padding","spacing","margin","heading","p","buttonGrid","_useState","useState","_useState2","slicedToArray","isPreview","setPreview","Fragment","Paper","react_markdown_default","source","Grid","container","item","xs","Button","fullWidth","onClick","TextField","id","label","multiline","rows","onChange","target","value","setIsOwner","loadEvent","sent","t0","createInvite","prompt","result","_createInvitee","match","params","useEffect","justify","List","dense","ListItem","ListItemText","loadInvite","sendRepy","modal","top","left","transform","width","maxWidth","_match$params","console","log","react_router","to","Modal","open","back","baseTheme","createMuiTheme","responsiveFontSizes","flexGrow","ThemeProvider","CssBaseline","Bar_scene","Container","exact","path","App","es","react_apollo_esm","Routes_scene","Boolean","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c4693f75.chunk.js","sourcesContent":["import { createHashHistory } from \"history\";\n\nconst history = createHashHistory();\n\nexport default history;\n","import ApolloClient from \"apollo-boost\";\n\nconst client = new ApolloClient({\n  uri: \"http://localhost:4000/graphql\"\n});\n\nexport default client;\n","/// <reference path=\"../../../modules.d.ts\"/>\nimport cryptoFactory from \"chainpad-crypto\";\nimport Nacl from \"tweetnacl\";\nimport { encodeURLSafe, decodeURLSafe } from \"@stablelib/base64\";\n\n// const { Curve, Nacl } = crypto;\nconst crypto = cryptoFactory(Nacl);\nconst { Curve } = crypto;\n\nexport const urlSafeToNacl = (key: string) =>\n  Nacl.util.encodeBase64(decodeURLSafe(key));\n\nexport const NaclToUrlSafe = (key: string) =>\n  encodeURLSafe(Nacl.util.decodeBase64(key));\n\nconst getCryptor = (theirPublic: string, myPrivate: string) => {\n  const derived = Curve.deriveKeys(\n    urlSafeToNacl(theirPublic),\n    urlSafeToNacl(myPrivate)\n  );\n\n  // Check that `derived` really exists because `deriveKeys()` can return\n  // undefined without throwing\n  if (!derived) {\n    throw new Error(\"Failed create encryption keys #5jKBfa\");\n  }\n\n  // Create a cryptor from the derived keys\n  const cryptor = Curve.createEncryptor(derived);\n\n  return cryptor;\n};\n\nexport const encryptToTwoKeys = (\n  theirPublic: string,\n  myPrivate: string,\n  unencrypted: string\n) => {\n  const cryptor = getCryptor(theirPublic, myPrivate);\n\n  // Encrypt the JSON encoded reply value\n  const encrypted = cryptor.encrypt(unencrypted);\n\n  return encrypted;\n};\n\nexport const decryptFromTwoKeys = (\n  theirPublic: string,\n  myPrivate: string,\n  encrypted: string\n) => {\n  const cryptor = getCryptor(theirPublic, myPrivate);\n\n  const unencrypted = cryptor.decrypt(encrypted);\n\n  return unencrypted;\n};\n","/// <reference path=\"../../../modules.d.ts\"/>\nimport cryptoFactory from \"chainpad-crypto\";\nimport Nacl from \"tweetnacl\";\nimport { encodeURLSafe, decodeURLSafe } from \"@stablelib/base64\";\n\nimport apollo from \"../../apollo\";\nimport { gql, ApolloQueryResult } from \"apollo-boost\";\nimport { Reply } from \"../replies\";\nimport { decryptFromTwoKeys } from \"../encryption\";\n\nconst crypto = cryptoFactory(Nacl);\n\n// This is what a decrypted event looks like\nexport interface NewEvent {\n  description: string;\n}\nexport interface EventWithId extends NewEvent {\n  _id: string;\n}\nexport interface Event extends EventWithId {\n  invitees: {\n    _id: string;\n    name: string;\n    reply?: {\n      reply: Reply;\n    };\n  }[];\n}\n\n// @TODO Figure out how to convert gql tags into types\nconst GET_EVENT = gql`\n  query getEvent($_id: ID!) {\n    event(_id: $_id) {\n      _id\n      content\n      invitees {\n        _id\n        content\n        reply {\n          content\n        }\n      }\n    }\n  }\n`;\n\ninterface EncryptedInvitee {\n  _id: string;\n  content: string;\n  reply?: {\n    content: string;\n  };\n}\ninterface GetEventQueryResult {\n  event: {\n    _id: string;\n    content: string;\n    invitees?: EncryptedInvitee[];\n  };\n}\n\nconst parse = (json: string) => {\n  try {\n    return JSON.parse(json);\n  } catch (e) {\n    throw new Error(`Invalid Event data. #rpxQVx ${e.message}`);\n  }\n};\n\nexport const getBySecretKey = async (secretKey: string): Promise<Event> => {\n  const keys = Nacl.box.keyPair.fromSecretKey(decodeURLSafe(secretKey));\n\n  return apollo\n    .query({\n      query: GET_EVENT,\n      variables: {\n        _id: encodeURLSafe(keys.publicKey)\n      },\n      fetchPolicy: \"network-only\"\n    })\n    .catch(error => {\n      alert(`Error getting event #QA3Ekl ${error.message}`);\n      throw error;\n    })\n    .then((response: ApolloQueryResult<GetEventQueryResult>) => {\n      const { event } = response.data;\n      if (response.data.event === null) {\n        throw new Error(\"Could not load event #RMLJzZ\");\n      }\n      const json = crypto.decrypt(response.data.event.content, keys.secretKey);\n\n      const getInvitees = () => {\n        if (event.invitees && event.invitees.length) {\n          return event.invitees.map(doc => {\n            const json = crypto.decrypt(doc.content, keys.secretKey);\n            const data = parse(json);\n            const invitee = { ...data, _id: doc._id };\n\n            // If there is no reply, return `invitee` at this point\n            if (!doc.reply) {\n              return { ...invitee, reply: null };\n            }\n\n            // Decrypt the reply\n            const replyJson = decryptFromTwoKeys(\n              doc._id,\n              secretKey,\n              doc.reply.content\n            );\n            const reply = JSON.parse(replyJson);\n            return { ...invitee, reply };\n          });\n        } else {\n          return [];\n        }\n      };\n\n      return {\n        ...parse(json),\n        invitees: getInvitees()\n      };\n    });\n};\n\nconst CREATE_EVENT_MUTATION = gql`\n  mutation CreateEvent($_id: ID!, $content: String!) {\n    createEvent(event: { _id: $_id, content: $content }) {\n      success\n    }\n  }\n`;\n\ninterface Keys {\n  secretKey: string;\n  publicKey: string;\n}\n\nexport const create = async (event: NewEvent): Promise<Keys> => {\n  const keys = Nacl.box.keyPair();\n  const secretKey = encodeURLSafe(keys.secretKey);\n  const publicKey = encodeURLSafe(keys.publicKey);\n  const json = JSON.stringify({ ...event, _id: publicKey });\n  const encrypted = crypto.encrypt(json, keys.secretKey);\n\n  return apollo\n    .mutate({\n      mutation: CREATE_EVENT_MUTATION,\n      variables: {\n        _id: publicKey,\n        content: encrypted\n      }\n    })\n    .catch(error => {\n      alert(`Error saving Event #SxA5gq ${error.message}`);\n      throw error;\n    })\n    .then(() => {\n      return {\n        secretKey,\n        publicKey\n      };\n    });\n};\n","import { Reducer, Action } from \"redux\";\nimport { ThunkAction } from \"redux-thunk\";\n\nimport history from \"../../history\";\nimport { create } from \"../../services/events\";\nimport { AppState } from \"../../store\";\n\nconst SET_DESCRIPTION = \"cryptparty/Events/SET_DESCRIPTION\";\nexport interface SetContentAction extends Action<typeof SET_DESCRIPTION> {\n  payload: {\n    description: string;\n  };\n}\nexport const setContent = (description: string): SetContentAction => ({\n  type: SET_DESCRIPTION,\n  payload: {\n    description\n  }\n});\n\nconst CREATE_EVENT = \"cryptparty/Events/CREATE_EVENT\";\nexport interface CreateEventAction extends Action<typeof CREATE_EVENT> {\n  payload: {};\n}\nexport const createEvent = (): ThunkAction<\n  void,\n  AppState,\n  {},\n  CreateEventAction\n> => (dispatch, getState) => {\n  const state = getState();\n  const { description } = state.CreateEvent.event;\n\n  create({ description }).then(keys => {\n    history.push(`/m/${keys.secretKey}`);\n  });\n};\n\nexport type Actions = SetContentAction | CreateEventAction;\n\ninterface EventsState {\n  event: {\n    description: string;\n  };\n}\nconst empty: EventsState = {\n  event: {\n    description: \"\"\n  }\n};\n\nconst reducer: Reducer<EventsState, Actions> = (\n  state = empty,\n  action\n): EventsState => {\n  switch (action.type) {\n    // case CREATE_EVENT: {\n    //   return state;\n    // }\n    case SET_DESCRIPTION: {\n      const { description } = action.payload;\n      return { ...state, event: { description } };\n    }\n  }\n\n  return state;\n};\n\nexport default reducer;\n","/// <reference path=\"../../../modules.d.ts\"/>\nimport cryptoFactory from \"chainpad-crypto\";\nimport Nacl from \"tweetnacl\";\nimport { encodeURLSafe, decodeURLSafe } from \"@stablelib/base64\";\nimport { gql, ApolloQueryResult } from \"apollo-boost\";\n\nimport apollo from \"../../apollo\";\nimport { Event, EventWithId } from \"../events\";\nimport { Reply } from \"../replies\";\nimport { decryptFromTwoKeys } from \"../encryption\";\n\nconst crypto = cryptoFactory(Nacl);\n\nexport interface NewInvite {\n  name: string;\n  event: EventWithId;\n}\nexport interface Invite extends NewInvite {\n  _id: string;\n  reply?: Reply;\n}\n\nexport interface NewInvitee {\n  name: string;\n  eventId: string;\n}\nexport interface Invitee extends NewInvitee {\n  _id: string;\n}\n\n// @TODO Figure out how to convert gql tags into types\nconst GET_INVITE = gql`\n  query getInvite($_id: ID!) {\n    invite(_id: $_id) {\n      _id\n      content\n      reply {\n        content\n      }\n    }\n  }\n`;\ninterface GetEventQueryResult {\n  invite: {\n    _id: string;\n    content: string;\n    reply?: {\n      content: string;\n    };\n  };\n}\n\nconst parse = (json: string) => {\n  try {\n    return JSON.parse(json);\n  } catch (e) {\n    throw new Error(`Invalid Invite data.  ${e.message}`);\n  }\n};\n\nexport const getBySecretKey = async (secretKey: string): Promise<Invite> => {\n  const keys = Nacl.box.keyPair.fromSecretKey(decodeURLSafe(secretKey));\n\n  return apollo\n    .query({\n      query: GET_INVITE,\n      variables: {\n        _id: encodeURLSafe(keys.publicKey)\n      }\n    })\n    .catch(error => {\n      alert(`Error getting invite #Z1u1n9 ${error.message}`);\n      throw error;\n    })\n    .then((response: ApolloQueryResult<GetEventQueryResult>) => {\n      if (response.data.invite === null) {\n        throw new Error(\"Could not load invite #Yt3UxI\");\n      }\n      const json = crypto.decrypt(response.data.invite.content, keys.secretKey);\n      const baseInvite: Invite = parse(json);\n\n      const inviteWithId = { ...baseInvite, _id: response.data.invite._id };\n\n      // If there is no reply, then return now, nothing else to do\n      if (!response.data.invite.reply) {\n        return inviteWithId;\n      }\n\n      const replyJson = decryptFromTwoKeys(\n        inviteWithId.event._id,\n        secretKey,\n        response.data.invite.reply.content\n      );\n      // @TODO Figure out what we want `reply` to look like\n      const reply: { reply: Reply } = parse(replyJson);\n\n      return { ...inviteWithId, reply: reply.reply };\n    });\n};\n\nconst CREATE_INVITE_MUTATION = gql`\n  mutation CreateInvite(\n    $_id: ID!\n    $eventId: ID!\n    $invite: String!\n    $invitee: String!\n  ) {\n    createInvite(\n      invite: {\n        _id: $_id\n        eventId: $eventId\n        invite: $invite\n        invitee: $invitee\n      }\n    ) {\n      success\n      invite {\n        _id\n      }\n    }\n  }\n`;\n\ninterface Keys {\n  secretKey: string;\n  publicKey: string;\n}\n\ninterface CreateResponse {\n  keys: Keys;\n  invitee: Invitee;\n}\n\nexport const create = async (\n  name: string,\n  event: Event,\n  ownerKey: string\n): Promise<CreateResponse> => {\n  // Create a copy of the `event` with the `invitee` key removed. We don't want\n  // to include this in the invitations.\n  const { invitees, ...eventWithoutInvitees } = event;\n\n  // Build a key for the new recipient\n  const keys = Nacl.box.keyPair();\n  const secretKey = encodeURLSafe(keys.secretKey);\n  const publicKey = encodeURLSafe(keys.publicKey);\n  const inviteJson = JSON.stringify({\n    name,\n    event: eventWithoutInvitees\n  });\n  const invite = crypto.encrypt(inviteJson, keys.secretKey);\n  const inviteeJson = JSON.stringify({\n    eventId: event._id,\n    name\n  });\n\n  // Encrypt a record of who we invited, for the owner's key\n  const ownerKeys = Nacl.box.keyPair.fromSecretKey(decodeURLSafe(ownerKey));\n  const invitee = crypto.encrypt(inviteeJson, ownerKeys.secretKey);\n\n  return apollo\n    .mutate({\n      mutation: CREATE_INVITE_MUTATION,\n      variables: {\n        _id: publicKey,\n        eventId: event._id,\n        invite,\n        invitee\n      }\n    })\n    .catch(error => {\n      alert(`Error saving Event #SxA5gq ${error.message}`);\n      throw error;\n    })\n    .then(() => {\n      return {\n        invitee: {\n          _id: publicKey,\n          eventId: event._id,\n          name\n        },\n        keys: {\n          secretKey,\n          publicKey\n        }\n      };\n    });\n};\n","import { gql, ApolloQueryResult } from \"apollo-boost\";\n\nimport apollo from \"../../apollo\";\nimport { encryptToTwoKeys } from \"../encryption\";\n\nexport enum Reply {\n  NO = 0,\n  YES = 1,\n  MAYBE = 2\n}\n\nexport const replyToString = (reply: Reply): string => {\n  switch (reply) {\n    case Reply.YES: {\n      return \"Yes\";\n    }\n    case Reply.NO: {\n      return \"No\";\n    }\n    case Reply.MAYBE: {\n      return \"Maybe\";\n    }\n  }\n};\n\ninterface SendReplyMutationResult {\n  result: boolean;\n  reply: {\n    _id: string;\n  };\n}\n\nconst SEND_REPLY_MUTATION = gql`\n  mutation SendReplyMutation($eventId: ID!, $inviteId: ID!, $content: String!) {\n    sendReply(\n      reply: { eventId: $eventId, inviteId: $inviteId, content: $content }\n    ) {\n      success\n    }\n  }\n`;\n\nexport const sendReply = async (\n  eventId: string,\n  inviteId: string,\n  secretKey: string,\n  reply: Reply\n) => {\n  const unecnrypted = JSON.stringify({ reply });\n  const content = encryptToTwoKeys(\n    // Set the public key (their key) as the `eventId` because this is event\n    // owner's public key.\n    eventId,\n    // Use our secret key as \"my key\" so we can also read the encrypted value of\n    // the reply\n    secretKey,\n    unecnrypted\n  );\n\n  return apollo\n    .mutate({\n      mutation: SEND_REPLY_MUTATION,\n      variables: {\n        eventId,\n        inviteId,\n        content\n      }\n    })\n    .catch(error => {\n      alert(`Error sending reply #JGdK73 ${error.message}`);\n      throw error;\n    })\n    .then((response: ApolloQueryResult<SendReplyMutationResult>) => {\n      // Respond with something...\n    });\n};\n","import { Reducer, Action, AnyAction } from \"redux\";\nimport { ThunkAction } from \"redux-thunk\";\n\nimport { AppState } from \"../../store\";\nimport { create, Invitee } from \"../../services/invites\";\nimport { Event, getBySecretKey } from \"../../services/events\";\nimport history from \"../../history\";\n\nconst SET_IS_OWNER = \"cryptparty/ManageEvent/SET_IS_OWNER\";\nexport interface SetIsOwnerAction extends Action<typeof SET_IS_OWNER> {\n  payload: {\n    isOwner: boolean;\n  };\n}\nexport const setIsOwner = (isOwner: boolean): SetIsOwnerAction => ({\n  type: SET_IS_OWNER,\n  payload: {\n    isOwner\n  }\n});\n\nconst LOAD_EVENT_ERROR = \"cryptparty/ManageEvent/LOAD_EVENT_ERROR\";\nexport interface LoadEventErrorAction extends Action<typeof LOAD_EVENT_ERROR> {\n  payload: {\n    error: string;\n  };\n}\nconst _loadEventError = (error: string): LoadEventErrorAction => ({\n  type: LOAD_EVENT_ERROR,\n  payload: {\n    error\n  }\n});\n\nconst LOAD_EVENT = \"cryptparty/ManageEvent/LOAD_EVENT\";\nexport interface LoadEventAction extends Action<typeof LOAD_EVENT> {\n  payload: {\n    secretKey: string;\n    event: Event;\n  };\n}\nconst _loadEvent = (secretKey: string, event: Event): LoadEventAction => ({\n  type: LOAD_EVENT,\n  payload: {\n    secretKey,\n    event\n  }\n});\nexport const loadEvent = (\n  secretKey: string\n): ThunkAction<void, AppState, {}, AnyAction> => async dispatch => {\n  try {\n    const event = await getBySecretKey(secretKey);\n    dispatch(_loadEvent(secretKey, event));\n  } catch (error) {\n    dispatch(_loadEventError(error.message));\n  }\n};\n\nconst CREATE_INVITEE = \"cryptparty/ManageEvent/CREATE_INVITEE\";\nexport interface CreateInviteeAction extends Action<typeof CREATE_INVITEE> {\n  payload: {\n    invitee: Invitee;\n  };\n}\nconst _createInvitee = (invitee: Invitee): CreateInviteeAction => ({\n  type: CREATE_INVITEE,\n  payload: {\n    invitee\n  }\n});\n\nexport const createInvite = (): ThunkAction<void, AppState, {}, AnyAction> => (\n  dispatch,\n  getState\n) => {\n  const state = getState();\n  // Ask the user for a name\n  const name = prompt(\"Who do you want to invite?\");\n  if (name === null) {\n    return;\n  }\n  // Create the invitation\n  create(name, state.ManageEvent.event, state.ManageEvent.secreteKey).then(\n    result => {\n      const { keys, invitee } = result;\n      // Dispatch an action to save this invitee in our list\n      dispatch(_createInvitee(invitee));\n      // Redirect to the new invitation URL\n      history.push(`/i/${keys.secretKey}/o`);\n    }\n  );\n};\n\nexport type Actions =\n  | SetIsOwnerAction\n  | LoadEventErrorAction\n  | LoadEventAction\n  | CreateInviteeAction;\n\ninterface State {\n  isOwner: boolean;\n  isLoading: boolean;\n  isError: boolean;\n  error: string;\n  secreteKey: string;\n  event: Event;\n}\nconst empty: State = {\n  isOwner: false,\n  isLoading: true,\n  isError: false,\n  error: \"\",\n  secreteKey: \"\",\n  event: {\n    _id: \"\",\n    description: \"\",\n    invitees: []\n  }\n};\nconst reducer: Reducer<State, Actions> = (state = empty, action): State => {\n  switch (action.type) {\n    case SET_IS_OWNER: {\n      return { ...state, isOwner: action.payload.isOwner };\n    }\n    case LOAD_EVENT: {\n      return {\n        ...state,\n        isLoading: false,\n        secreteKey: action.payload.secretKey,\n        event: action.payload.event\n      };\n    }\n    case LOAD_EVENT_ERROR: {\n      return {\n        ...state,\n        isLoading: false,\n        isError: true,\n        error: action.payload.error\n      };\n    }\n    case CREATE_INVITEE: {\n      return {\n        ...state,\n        event: {\n          ...state.event,\n          invitees: [...state.event.invitees, action.payload.invitee]\n        }\n      };\n    }\n  }\n  return state;\n};\n\nexport default reducer;\n","import { Action, Reducer, AnyAction } from \"redux\";\nimport { ThunkAction } from \"redux-thunk\";\n\nimport { Invite, getBySecretKey } from \"../../services/invites\";\nimport { sendReply as sendReplyToServer, Reply } from \"../../services/replies\";\nimport { AppState } from \"../../store\";\n\nconst SET_IS_OWNER = \"cryptparty/ViewInvite/SET_IS_OWNER\";\nexport interface SetIsOwnerAction extends Action<typeof SET_IS_OWNER> {\n  payload: {\n    isOwner: boolean;\n  };\n}\nexport const setIsOwner = (isOwner: boolean): SetIsOwnerAction => ({\n  type: SET_IS_OWNER,\n  payload: {\n    isOwner\n  }\n});\n\nconst LOAD_INVITE = \"cryptparty/ViewInvite/LOAD_INVITE\";\nexport interface LoadInviteAction extends Action<typeof LOAD_INVITE> {\n  payload: {\n    secretKey: string;\n    invite: Invite;\n  };\n}\nconst _loadInvite = (invite: Invite, secretKey: string): LoadInviteAction => ({\n  type: LOAD_INVITE,\n  payload: {\n    secretKey,\n    invite\n  }\n});\nexport const loadInvite = (\n  secretKey: string\n): ThunkAction<void, AppState, {}, AnyAction> => async (dispatch, getState) => {\n  getBySecretKey(secretKey).then(invite => {\n    dispatch(_loadInvite(invite, secretKey));\n  });\n};\n\nconst SEND_REPLY = \"cryptparty/ViewInvite/SEND_REPLY\";\nexport interface SendReplyAction extends Action<typeof SEND_REPLY> {\n  payload: {\n    reply: Reply;\n  };\n}\nconst _sendReply = (reply: Reply): SendReplyAction => ({\n  type: SEND_REPLY,\n  payload: {\n    reply\n  }\n});\nexport const sendReply = (\n  reply: Reply\n): ThunkAction<void, AppState, {}, AnyAction> => (dispatch, getState) => {\n  const state = getState();\n  // Send the reply\n  sendReplyToServer(\n    state.ViewInvite.invite.event._id,\n    state.ViewInvite.invite._id,\n    state.ViewInvite.secretKey,\n    reply\n  ).then(response => {\n    // Record success in state\n    dispatch(_sendReply(reply));\n  });\n};\n\ntype Actions = SetIsOwnerAction | LoadInviteAction | SendReplyAction;\n\ninterface State {\n  isOwner: boolean;\n  isLoading: boolean;\n  isError: boolean;\n  error: string;\n  secretKey: string;\n  invite: Invite;\n}\nconst empty: State = {\n  isOwner: false,\n  isLoading: true,\n  isError: false,\n  error: \"\",\n  secretKey: \"\",\n  invite: {\n    _id: \"\",\n    name: \"\",\n    event: {\n      _id: \"\",\n      description: \"\"\n    },\n    reply: undefined\n  }\n};\n\nconst reducer: Reducer<State, Actions> = (state = empty, action): State => {\n  switch (action.type) {\n    case SET_IS_OWNER: {\n      return {\n        ...state,\n        isOwner: action.payload.isOwner\n      };\n    }\n    case LOAD_INVITE: {\n      return {\n        ...state,\n        isLoading: false,\n        secretKey: action.payload.secretKey,\n        invite: action.payload.invite\n      };\n    }\n    case SEND_REPLY: {\n      return {\n        ...state,\n        invite: {\n          ...state.invite,\n          reply: action.payload.reply\n        }\n      };\n    }\n  }\n  return state;\n};\n\nexport default reducer;\n","import thunkMiddleware from \"redux-thunk\";\nimport { createStore, combineReducers, applyMiddleware, compose } from \"redux\";\n\nimport CreateEvent from \"./scenes/CreateEvent/CreateEvent.state\";\nimport ManageEvent from \"./scenes/ManageEvent/ManageEvent.state\";\nimport ViewInvite from \"./scenes/ViewInvite/ViewInvite.state\";\n\nconst reducer = combineReducers({\n  CreateEvent,\n  ManageEvent,\n  ViewInvite\n});\n\nexport type AppState = ReturnType<typeof reducer>;\n\nconst composeEnhancers =\n  typeof window === \"object\" &&\n  (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n    ? (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n    : compose;\n\nconst store = createStore(\n  reducer,\n  composeEnhancers(applyMiddleware(thunkMiddleware))\n);\n\nexport default store;\n","import React from \"react\";\nimport { createStyles, withStyles, WithStyles, Theme } from \"@material-ui/core\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Box from \"@material-ui/core/Box\";\n\nconst Bar: React.FC<Props> = (props: Props) => {\n  const { classes } = props;\n\n  return (\n    <AppBar position=\"static\" color=\"default\">\n      {/* <Toolbar> */}\n      <Box className={classes.inner}>\n        <Typography variant=\"h6\" component=\"h1\" color=\"inherit\">\n          Zero Knowledge Party\n        </Typography>\n        <Typography variant=\"h6\" component=\"h2\" color=\"inherit\">\n          <Box fontSize=\"0.8em\">Encrypted parties since 2020</Box>\n        </Typography>\n      </Box>\n      {/* </Toolbar> */}\n    </AppBar>\n  );\n};\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    inner: {\n      ...theme.mixins.gutters()\n    }\n  });\n\ntype Props = WithStyles<typeof styles>;\n\nexport default withStyles(styles)(Bar);\n","import React, { useState } from \"react\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { connect } from \"react-redux\";\nimport ReactMarkdown from \"react-markdown\";\nimport {\n  withStyles,\n  WithStyles,\n  TextField,\n  Theme,\n  createStyles\n} from \"@material-ui/core\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\n\nimport { setContent, createEvent } from \"./CreateEvent.state\";\nimport { AppState } from \"../../store\";\nimport { AnyAction } from \"redux\";\nimport { RouteComponentProps } from \"react-router\";\n\nconst CreateEvent: React.FC<Props> = (props: Props) => {\n  const { classes, event, setContent, createEvent } = props;\n\n  const [isPreview, setPreview] = useState(false);\n\n  const showPreview = () => {\n    return (\n      <>\n        <Paper className={classes.paper}>\n          <ReactMarkdown source={event.description} />\n        </Paper>\n        <Typography className={classes.p}>\n          Once published, this event cannot be edited.\n        </Typography>\n        <Grid container className={classes.buttonGrid} spacing={2}>\n          <Grid item xs={6}>\n            <Button\n              variant=\"contained\"\n              fullWidth\n              color=\"default\"\n              onClick={() => {\n                setPreview(false);\n              }}\n            >\n              Edit Again\n            </Button>\n          </Grid>\n          <Grid item xs={6}>\n            <Button\n              variant=\"contained\"\n              fullWidth\n              color=\"secondary\"\n              onClick={() => {\n                createEvent();\n              }}\n            >\n              Publish\n            </Button>\n          </Grid>\n        </Grid>\n      </>\n    );\n  };\n\n  const showEditor = () => {\n    return (\n      <>\n        <Typography>Enter your event description</Typography>\n        <Paper className={classes.paper}>\n          <TextField\n            id=\"content\"\n            label=\"Content\"\n            multiline\n            rows=\"16\"\n            fullWidth\n            onChange={event => setContent(event.target.value)}\n            value={event.description}\n          />\n          <Typography>Supports markdown</Typography>\n        </Paper>\n        <Button\n          variant=\"contained\"\n          fullWidth\n          color=\"primary\"\n          onClick={() => {\n            setPreview(true);\n          }}\n        >\n          Preview\n        </Button>\n      </>\n    );\n  };\n\n  return (\n    <>\n      <Typography className={classes.heading} variant=\"h2\">\n        Create an event\n      </Typography>\n      {isPreview ? showPreview() : showEditor()}\n    </>\n  );\n};\n\nconst mapStateToProps = (state: AppState) => {\n  return {\n    event: state.CreateEvent.event\n  };\n};\n\nconst mapDispatchToProps = (\n  dispatch: ThunkDispatch<AppState, {}, AnyAction>\n) => {\n  return {\n    setContent: (description: string) => {\n      dispatch(setContent(description));\n    },\n    createEvent: () => {\n      dispatch(createEvent());\n    }\n  };\n};\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    paper: {\n      ...theme.mixins.gutters(),\n      padding: theme.spacing(2),\n      margin: theme.spacing(2, 0)\n    },\n    heading: {\n      margin: theme.spacing(2, 0)\n    },\n    p: {\n      margin: theme.spacing(2, 0)\n    },\n    buttonGrid: {\n      ...theme.mixins.gutters()\n    }\n  });\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = ReturnType<typeof mapDispatchToProps>;\ntype Props = StateProps &\n  DispatchProps &\n  WithStyles<typeof styles> &\n  RouteComponentProps;\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(withStyles(styles)(CreateEvent));\n","import React, { useEffect } from \"react\";\nimport { RouteComponentProps } from \"react-router\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { AnyAction } from \"redux\";\nimport { connect } from \"react-redux\";\nimport ReactMarkdown from \"react-markdown\";\nimport { createStyles, Theme, WithStyles, withStyles } from \"@material-ui/core\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Typography from \"@material-ui/core/Typography\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\n\nimport { AppState } from \"../../store\";\nimport { setIsOwner, loadEvent, createInvite } from \"./ManageEvent.state\";\nimport { replyToString } from \"../../services/replies\";\n\nconst ManageEvent: React.FC<Props> = (props: Props) => {\n  const { match, classes, loadEvent } = props;\n  const { key } = match.params;\n\n  useEffect(() => {\n    loadEvent(key);\n  }, [loadEvent, key]);\n\n  if (props.isLoading) {\n    return <div>Loading</div>;\n  }\n\n  if (props.isError) {\n    return (\n      <div>\n        <Typography variant=\"h2\" color=\"error\">\n          Error\n        </Typography>\n        <Typography>{props.error}</Typography>\n      </div>\n    );\n  }\n\n  const getInvitees = () => {\n    if (!props.event.invitees || !props.event.invitees.length) {\n      return (\n        <ListItem>\n          <ListItemText>Nobody so far...</ListItemText>\n        </ListItem>\n      );\n    }\n    return props.event.invitees.map(invitee => {\n      return (\n        <ListItem key={invitee._id}>\n          <ListItemText>\n            {invitee.name} -{\" \"}\n            {!!invitee.reply\n              ? `replied ${replyToString(invitee.reply.reply)}`\n              : \"no reply\"}\n          </ListItemText>\n        </ListItem>\n      );\n    });\n  };\n\n  return (\n    <>\n      <Typography className={classes.p} color=\"secondary\">\n        Save this link.\n      </Typography>\n      <Typography className={classes.p}>\n        This link is your event. If you lose this page there is no way to\n        recover it.\n      </Typography>\n      <Typography className={classes.p}>\n        To invite a new person, create an invitation link for them. Each person\n        gets their own invitation.\n      </Typography>\n      <Grid container justify=\"flex-end\">\n        <Grid item xs={12}>\n          <Button\n            fullWidth\n            color=\"secondary\"\n            variant=\"contained\"\n            onClick={props.createInvite}\n          >\n            Create New Invite Link\n          </Button>\n        </Grid>\n      </Grid>\n      <Typography className={classes.heading} variant=\"h2\">\n        Already invited\n      </Typography>\n      <Paper className={classes.paper}>\n        <Typography>\n          You created invite links for the following people.\n        </Typography>\n        <List dense>{getInvitees()}</List>\n      </Paper>\n      <Typography className={classes.heading} variant=\"h2\">\n        Your event\n      </Typography>\n      <Paper className={classes.paper}>\n        <ReactMarkdown source={props.event.description} />\n      </Paper>\n    </>\n  );\n};\n\nconst mapStateToProps = (state: AppState) => {\n  const { ManageEvent } = state;\n  return ManageEvent;\n};\n\nconst mapDispatchToProps = (\n  dispatch: ThunkDispatch<AppState, {}, AnyAction>\n) => {\n  return {\n    setIsOwner: (isOwner: boolean) => {\n      dispatch(setIsOwner(isOwner));\n    },\n    loadEvent: (secretKey: string) => {\n      dispatch(loadEvent(secretKey));\n    },\n    createInvite: () => {\n      dispatch(createInvite());\n    }\n  };\n};\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    paper: {\n      ...theme.mixins.gutters(),\n      padding: theme.spacing(2),\n      margin: theme.spacing(2, 0)\n    },\n    heading: {\n      margin: theme.spacing(3, 0)\n    },\n    p: {\n      margin: theme.spacing(1, 0)\n    }\n  });\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = ReturnType<typeof mapDispatchToProps>;\ninterface RouteParams {\n  key: string;\n}\ntype Props = StateProps &\n  DispatchProps &\n  WithStyles<typeof styles> &\n  RouteComponentProps<RouteParams>;\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(withStyles(styles)(ManageEvent));\n","import React, { useEffect } from \"react\";\nimport { RouteComponentProps, Redirect } from \"react-router\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { AnyAction } from \"redux\";\nimport { connect } from \"react-redux\";\nimport ReactMarkdown from \"react-markdown\";\nimport { createStyles, Theme, WithStyles, withStyles } from \"@material-ui/core\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Modal from \"@material-ui/core/Modal\";\nimport Button from \"@material-ui/core/Button\";\n\nimport { AppState } from \"../../store\";\nimport { setIsOwner, loadInvite, sendReply } from \"./ViewInvite.state\";\nimport { replyToString, Reply } from \"../../services/replies\";\n\nconst ViewInvite: React.FC<Props> = (props: Props) => {\n  const { match, classes, loadInvite } = props;\n  const { key, action } = match.params;\n\n  useEffect(() => {\n    console.log(\"ViewInvite.scene useEffect #vXShRN\");\n    loadInvite(key);\n  }, [loadInvite, key]);\n\n  if (!!action && action === \"o\") {\n    props.setIsOwner(true);\n    // Remove the trailing `/o` part from the URL. This allows the event owner\n    // to share this URL from their browser directly, and the recipient will not\n    // see the \"share this page\" message.\n    return <Redirect to={`/i/${key}`} />;\n  }\n\n  if (props.isLoading) {\n    return <div>Loading</div>;\n  }\n\n  if (props.isError) {\n    return (\n      <div>\n        <Typography variant=\"h2\" color=\"error\">\n          Error\n        </Typography>\n        <Typography>{props.error}</Typography>\n      </div>\n    );\n  }\n\n  const showOwnerMesage = () => {\n    return (\n      <Modal open={true}>\n        <div className={classes.modal}>\n          <Paper className={classes.paper}>\n            <Typography variant=\"h2\">\n              {props.invite.name}'s invitation\n            </Typography>\n            <Typography className={classes.p}>\n              This is {props.invite.name}'s invitation link. Send this link to{\" \"}\n              {props.invite.name}.\n            </Typography>\n            <Button\n              fullWidth\n              variant=\"contained\"\n              onClick={() => {\n                window.history.back();\n              }}\n            >\n              Back to my event\n            </Button>\n          </Paper>\n        </div>\n      </Modal>\n    );\n  };\n\n  const showReplyStatus = () => {\n    if (props.invite.reply === undefined) {\n      return (\n        <Typography className={classes.p}>You have not yet replied.</Typography>\n      );\n    }\n\n    return (\n      <Typography className={classes.p}>\n        You have replied: {replyToString(props.invite.reply)}\n      </Typography>\n    );\n  };\n\n  const showReplyButtons = () => {\n    return (\n      <>\n        <Typography className={classes.p}>\n          {props.invite.reply !== undefined\n            ? \"Update your reply\"\n            : \"Are you coming?\"}\n        </Typography>\n        <Grid container className={classes.buttonGrid} spacing={2}>\n          <Grid item xs={4}>\n            <Button\n              variant=\"contained\"\n              fullWidth\n              color=\"primary\"\n              onClick={() => {\n                props.sendRepy(Reply.NO);\n              }}\n            >\n              No\n            </Button>\n          </Grid>\n          <Grid item xs={4}>\n            <Button\n              variant=\"contained\"\n              fullWidth\n              color=\"default\"\n              onClick={() => {\n                props.sendRepy(Reply.MAYBE);\n              }}\n            >\n              Maybe\n            </Button>\n          </Grid>\n          <Grid item xs={4}>\n            <Button\n              variant=\"contained\"\n              fullWidth\n              color=\"secondary\"\n              onClick={() => {\n                props.sendRepy(Reply.YES);\n              }}\n            >\n              Yes\n            </Button>\n          </Grid>\n        </Grid>\n      </>\n    );\n  };\n\n  return (\n    <>\n      {props.isOwner ? showOwnerMesage() : null}\n      <Typography variant=\"h2\">Dear {props.invite.name}</Typography>\n      <Paper className={classes.paper}>\n        <ReactMarkdown source={props.invite.event.description} />\n      </Paper>\n      {showReplyStatus()}\n      {showReplyButtons()}\n    </>\n  );\n};\n\nconst mapStateToProps = (state: AppState) => {\n  const { ViewInvite } = state;\n  return ViewInvite;\n};\n\nconst mapDispatchToProps = (\n  dispatch: ThunkDispatch<AppState, {}, AnyAction>\n) => {\n  return {\n    setIsOwner: (isOwner: boolean) => {\n      dispatch(setIsOwner(isOwner));\n    },\n    loadInvite: (secretKey: string) => {\n      dispatch(loadInvite(secretKey));\n    },\n    sendRepy: (reply: Reply) => {\n      dispatch(sendReply(reply));\n    }\n  };\n};\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    paper: {\n      ...theme.mixins.gutters(),\n      padding: theme.spacing(2, 0),\n      margin: theme.spacing(2, 0)\n    },\n    modal: {\n      position: \"absolute\",\n      top: \"50%\",\n      left: \"50%\",\n      transform: \"translate(-50%, -50%)\",\n      width: \"80vw\",\n      maxWidth: \"400px\"\n    },\n    p: {\n      margin: theme.spacing(2, 0)\n    },\n    buttonGrid: {\n      ...theme.mixins.gutters()\n    }\n  });\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = ReturnType<typeof mapDispatchToProps>;\ninterface RouteParams {\n  key: string;\n  action: string;\n}\ntype Props = StateProps &\n  DispatchProps &\n  WithStyles<typeof styles> &\n  RouteComponentProps<RouteParams>;\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(withStyles(styles)(ViewInvite));\n","import React from \"react\";\nimport { Router, Route } from \"react-router-dom\";\nimport {\n  createStyles,\n  withStyles,\n  WithStyles,\n  Theme,\n  createMuiTheme\n} from \"@material-ui/core\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Container from \"@material-ui/core/Container\";\n\nimport history from \"../../history\";\nimport Bar from \"../Bar\";\nimport CreateEvent from \"../CreateEvent\";\nimport ManageEvent from \"../ManageEvent\";\nimport ViewInvite from \"../ViewInvite\";\nimport { responsiveFontSizes } from \"@material-ui/core/styles\";\nimport { ThemeProvider } from \"@material-ui/styles\";\n\nconst baseTheme = createMuiTheme();\nconst theme = responsiveFontSizes(baseTheme);\n\nconst Routes: React.FC<Props> = (props: Props) => {\n  const { classes } = props;\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Router history={history}>\n        <CssBaseline />\n        <Bar />\n        <Container className={classes.container}>\n          <Route exact path=\"/\" component={CreateEvent} />\n          <Route path=\"/m/:key\" component={ManageEvent} />\n          <Route path=\"/i/:key/:action?\" component={ViewInvite} />\n        </Container>\n      </Router>\n    </ThemeProvider>\n  );\n};\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    container: {\n      flexGrow: 1\n    }\n  });\n\ntype Props = WithStyles<typeof styles>;\n\nexport default withStyles(styles)(Routes);\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport { ApolloProvider } from \"react-apollo\";\n\nimport store from \"./store\";\nimport apollo from \"./apollo\";\n\nimport Routes from \"./scenes/Routes\";\n\nconst App: React.FC = () => {\n  return (\n    <Provider store={store}>\n      <ApolloProvider client={apollo}>\n        <Routes />\n      </ApolloProvider>\n    </Provider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}